<?xml version="1.0" encoding="UTF-8"?>
<project name="dev-bundle" basedir=".">

  <fail unless="project.basedir" message="Property 'project.basedir' must be set before loading build-bundle.xml"/>
  <fail unless="dev.path" message="Property 'dev.path' must be set before loading build-bundle.xml"/>

  <property name="build-bundle.properties" value="${dev.path}\build\build-bundle.properties"/>
  <echo message="Load build-bundle.properties: ${dev.path}\build\build-bundle.properties" level="debug"/>
  <property file="${build-bundle.properties}"/>

  <!-- Import build-commons.xml -->
  <import file="build-commons.xml"/>

  <fail unless="bundle.name" message="Property 'bundle.name' must be set before loading build-bundle.xml"/>
  <fail unless="bundle.type" message="Property 'bundle.type' must be set before loading build-bundle.xml"/>

  <!-- Properties -->
  <property name="bundle.release.path" value="${build.path}\${bundle.type}"/>
  <property name="bundle.tmp.build.path" value="${build.tmp.path}\bundles_build/${bundle.name}"/>
  <property name="bundle.tmp.prep.path" value="${build.tmp.path}\bundles_prep/${bundle.name}"/>
  <property name="bundle.tmp.src.path" value="${build.tmp.path}\bundles_src"/>

  <macrodef name="getmoduleuntouched">
    <attribute name="name"/>
    <attribute name="version"/>
    <attribute name="propSrcDest"/>
    <attribute name="propSrcFilename"/>
    <sequential>
      <echo message="** Get Module Untouched"/>
      <echo message="* Name        : @{name}"/>
      <echo message="* Version     : @{version}"/>

      <var name="@{propSrcDest}" unset="true"/>
      <var name="@{propSrcFilename}" unset="true"/>
      <var name="getmu.src" unset="true"/>
      <var name="getmu.url" unset="true"/>
      <var name="getmu.filename" unset="true"/>
      <var name="getmu.basename" unset="true"/>
      <var name="getmu.folder" unset="true"/>
      <var name="getmu.tmp" unset="true"/>

      <propertyregex property="getmu.src" input="${module.untouchedurl}" regexp="@module@" replace="@{name}" global="true"/>
      <echo message="* Src         : ${getmu.src}"/>
      <property url="${getmu.src}"/>

      <property name="getmu.url" value="${@{version}}"/>
      <basename property="getmu.filename" file="${getmu.url}"/>
      <propertyregex property="getmu.basename" input="${getmu.filename}" regexp="(.*)\.(.*)" select="\1"/>
      <property name="getmu.folder" value="@{name}@{version}"/>
      <property name="getmu.tmp" value="${bundle.tmp.src.path}/@{name}"/>
      <property name="getmu.dest" value="${getmu.tmp}/${getmu.folder}"/>

      <echo message="* Url         : ${getmu.url}"/>
      <echo message="* Filename    : ${getmu.filename}"/>
      <echo message="* Destination : ${getmu.dest}"/>

      <delete dir="${getmu.dest}"/>
      <mkdir dir="${getmu.dest}"/>
      <get dest="${getmu.tmp}/${getmu.filename}" src="${getmu.url}" skipexisting="true"/>
      <property name="@{propSrcDest}" value="${getmu.dest}"/>
      <property name="@{propSrcFilename}" value="${getmu.filename}"/>
      <echo message="Processing ${getmu.filename}..."/>
      <if>
        <or>
          <matches string="${getmu.filename}" pattern="7z$"/>
          <matches string="${getmu.filename}" pattern="\.7z\.exe$"/>
        </or>
        <then>
          <unsevenzip src="${getmu.tmp}/${getmu.filename}" dest="${getmu.dest}"/>
        </then>
        <elseif>
          <matches string="${getmu.filename}" pattern="zip$"/>
          <then>
            <unzip src="${getmu.tmp}/${getmu.filename}" dest="${getmu.dest}"/>
          </then>
        </elseif>
        <elseif>
          <matches string="${getmu.filename}" pattern="tar\.gz$"/>
          <then>
            <gunzip src="${getmu.tmp}/${getmu.filename}" dest="${getmu.dest}"/>
            <untar src="${getmu.dest}/${getmu.basename}" dest="${getmu.dest}"/>
          </then>
        </elseif>
        <else>
          <copy file="${getmu.tmp}/${getmu.filename}" todir="${getmu.dest}"/>
        </else>
      </if>
    </sequential>
  </macrodef>

  <target name="release.version">
      <var name="bundle.folder" unset="true"/>
      <var name="bundle.version" unset="true"/>
      <var name="bundle.destdir" unset="true"/>
      <var name="bundle.destfile" unset="true"/>
      <basename property="bundle.folder" file="${bundle.path}"/>
      <replaceproperty src="bundle.folder" dest="bundle.version" replace="${bundle.name}" with=""/>
      <property name="bundle.destdir" value="${bundle.release.path}\${bundle.name}\${bundle.release}"/>
      <property name="bundle.destfile" value="${bundle.destdir}\bearsampp-${bundle.name}-${bundle.version}-${bundle.release}"/>

      <echo message="*** Release bundle "/>
      <echo message="* Name    : ${bundle.name} "/>
      <echo message="* Version : ${bundle.version} "/>
      <echo message="* Release : ${bundle.release} "/>
      <echo message="* Type    : ${bundle.type} "/>
      <echo message="* Format  : ${bundle.format} "/>

      <mkdir dir="${bundle.tmp.build.path}"/>
      <delete dir="${bundle.tmp.build.path}\${bundle.name}${bundle.version}"/>
      <copy todir="${bundle.tmp.build.path}\${bundle.name}${bundle.version}">
        <fileset dir="${bundle.path}" defaultexcludes="yes"/>
      </copy>
      <echo message="Insert release version in ${bundle.tmp.build.path}\${bundle.name}${bundle.version}/bearsampp.conf..."/>
      <copy file="${bundle.path}/bearsampp.conf" tofile="${bundle.tmp.build.path}\${bundle.name}${bundle.version}/bearsampp.conf" overwrite="true">
        <filterset>
          <filter token="RELEASE_VERSION" value="${bundle.release}"/>
        </filterset>
      </copy>

      <mkdir dir="${bundle.destdir}"/>
      <mkdir dir="${bundle.release.path}\${bundle.name}"/>
      <if>
        <equals arg1="${bundle.format}" arg2="7z"/>
        <then>
          <delete file="${bundle.destfile}.7z"/>
          <echo message="Compressing ${bundle.name}${bundle.version} to ${bundle.destfile}.7z..."/>
          <sevenzip src="${bundle.tmp.build.path}\${bundle.name}${bundle.version}" dest="${bundle.destfile}.7z" format="7z"/>
          <hashfile file="${bundle.destfile}.7z"/>
        </then>
        <else>
          <delete file="${bundle.destfile}.zip"/>
          <echo message="Compressing ${bundle.name}${bundle.version} to ${bundle.destfile}.zip..."/>
          <sevenzip src="${bundle.tmp.build.path}\${bundle.name}${bundle.version}" dest="${bundle.destfile}.zip" format="zip"/>
          <hashfile file="${bundle.destfile}.zip"/>
        </else>
      </if>
  </target>

  <target name="release.build">
    <basename property="bundle.folder" file="${bundle.path}"/>
    <replaceproperty src="bundle.folder" dest="bundle.version" replace="${bundle.name}" with=""/>

    <delete dir="${bundle.tmp.prep.path}\${bundle.folder}"/>
    <mkdir dir="${bundle.tmp.prep.path}\${bundle.folder}"/>
    <copy todir="${bundle.tmp.prep.path}\${bundle.folder}">
      <fileset dir="${bundle.path}" defaultexcludes="yes"/>
    </copy>
  </target>

  <target name="release.one">
    <var name="bundle.folder" unset="true"/>
    <basename property="bundle.folder" file="${bundle.path}"/>

    <antcall target="release.build">
      <param name="bundle.path" value="${bundle.path}"/>
    </antcall>

    <if>
      <available file="${bundle.tmp.prep.path}\${bundle.folder}" type="dir"/>
      <then>
        <antcall target="release.version">
          <param name="bundle.path" value="${bundle.tmp.prep.path}\${bundle.folder}"/>
        </antcall>
      </then>
      <else>
        <fail message="Bundle folder not found in: ${bundle.tmp.prep.path}\${bundle.folder}"/>
      </else>
    </if>
  </target>

  <target name="release" depends="init, load.lib" description="Release">
    <input message="Please enter the ${bundle.name} bundle's version to release or * for all versions: " addproperty="input.bundle"/>
    <if>
      <equals arg1="${input.bundle}" arg2="*"/>
      <then>
        <foreach target="release.one" param="bundle.path">
          <path><dirset dir="${project.basedir}\bin" includes="*"/></path>
        </foreach>
      </then>
      <elseif>
        <available file="${project.basedir}\bin\${bundle.name}${input.bundle}" type="dir"/>
        <then>
          <antcall target="release.one">
            <param name="bundle.path" value="${project.basedir}\bin\${bundle.name}${input.bundle}"/>
          </antcall>
        </then>
      </elseif>
      <else>
        <fail message="Invalid bundle's version for ${bundle.name}"/>
      </else>
    </if>
  </target>

</project>
